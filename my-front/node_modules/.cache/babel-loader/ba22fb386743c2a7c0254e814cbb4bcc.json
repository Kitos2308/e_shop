{"ast":null,"code":"import { authAPI } from \"../api/auth\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst SET_USER_DATA_REGISTRY = 'SET_USER_DATA_REGISTRY'; // const GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n  // rId: null,\n  email: null,\n  login: null,\n  isAuth: false // captchaUrl: null // if null, then captcha is not required\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispatch => {\n  let response = await authAPI.me();\n  debugger;\n\n  if (response.data.resultCode === \"0\") {\n    let {\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(email, login, true));\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  debugger;\n  let response = await authAPI.login(email, password);\n  debugger;\n\n  if (response.data.resultCode === \"0\") {\n    // success, get auth data\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === \"10\") {\n      alert('error'); // dispatch(getCaptchaUrl());\n    } // let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n\n\n    dispatch(stopSubmit(\"login\", {\n      _error: 'error'\n    }));\n  }\n};\nexport const register = (email, password, password_confirm) => async dispatch => {\n  debugger;\n  let response = await authAPI.register(email, password, password_confirm);\n  debugger;\n\n  if (response.data.resultCode === \"0\") {\n    // success, get auth data\n    dispatch(getAuthUserData());\n  } else {\n    if (response.data.resultCode === \"10\") {\n      alert('error'); // dispatch(getCaptchaUrl());\n    } // let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n\n\n    dispatch(stopSubmit(\"login\", {\n      _error: 'error'\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === '0') {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/n.dolgov/Desktop/projects/Final+code/my-front/src/redux/auth-reducer.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","SET_USER_DATA_REGISTRY","initialState","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","password","alert","_error","register","password_confirm","logout"],"mappings":"AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,sBAAsB,GAAG,wBAA/B,C,CACA;;AAEA,IAAIC,YAAY,GAAG;AACf;AACAC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO,CAKf;;AALe,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAaA,OAAO,MAAMI,eAAe,GAAG,CAAER,KAAF,EAASC,KAAT,EAAgBC,MAAhB,MAA4B;AACvDI,EAAAA,IAAI,EAAET,aADiD;AAClCU,EAAAA,OAAO,EACxB;AAAEP,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB;AAFmD,CAA5B,CAAxB;AAQP,OAAO,MAAMO,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAErD,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACiB,EAAR,EAArB;AACA;;AACA,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,GAAjC,EAAsC;AAClC,QAAI;AAAEb,MAAAA,KAAF;AAASD,MAAAA;AAAT,QAAkBW,QAAQ,CAACE,IAAT,CAAcA,IAApC;AACAH,IAAAA,QAAQ,CAACF,eAAe,CAAER,KAAF,EAASC,KAAT,EAAgB,IAAhB,CAAhB,CAAR;AACH;AACJ,CARM;AAYP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQe,QAAR,KAAqB,MAAOL,QAAP,IAAoB;AAC1D;AACA,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBe,QAArB,CAArB;AACA;;AACA,MAAIJ,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,GAAjC,EAAsC;AAClC;AACAJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,GAHD,MAGO;AACH,QAAIE,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,IAAjC,EAAuC;AACnCE,MAAAA,KAAK,CAAC,OAAD,CAAL,CADmC,CAEnC;AACH,KAJE,CAMH;;;AACAN,IAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAACqB,MAAAA,MAAM,EAAE;AAAT,KAAV,CAAX,CAAR;AACH;AACJ,CAhBM;AAmBP,OAAO,MAAMC,QAAQ,GAAG,CAAClB,KAAD,EAAQe,QAAR,EAAkBI,gBAAlB,KAAuC,MAAOT,QAAP,IAAoB;AAC/E;AACA,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACuB,QAAR,CAAiBlB,KAAjB,EAAwBe,QAAxB,EAAiCI,gBAAjC,CAArB;AACA;;AACA,MAAIR,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,GAAjC,EAAsC;AAClC;AACAJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACH,GAHD,MAGO;AACH,QAAIE,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,IAAjC,EAAuC;AACnCE,MAAAA,KAAK,CAAC,OAAD,CAAL,CADmC,CAEnC;AACH,KAJE,CAMH;;;AACAN,IAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAACqB,MAAAA,MAAM,EAAE;AAAT,KAAV,CAAX,CAAR;AACH;AACJ,CAhBM;AAmBP,OAAO,MAAMG,MAAM,GAAG,MAAM,MAAOV,QAAP,IAAoB;AAC5C,MAAIC,QAAQ,GAAG,MAAMhB,OAAO,CAACyB,MAAR,EAArB;;AAEA,MAAIT,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,GAAjC,EAAsC;AAClCJ,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,CANM;AAUP,eAAeL,WAAf","sourcesContent":["import {authAPI} from \"../api/auth\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst SET_USER_DATA_REGISTRY = 'SET_USER_DATA_REGISTRY'\n// const GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n    // rId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    // captchaUrl: null // if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport const setAuthUserData = ( email, login, isAuth) => ({\n    type: SET_USER_DATA, payload:\n        { email, login, isAuth}\n});\n\n\n\n\nexport const getAuthUserData = () => async (dispatch) => {\n\n    let response = await authAPI.me();\n    debugger\n    if (response.data.resultCode === \"0\") {\n        let { login, email} = response.data.data;\n        dispatch(setAuthUserData( email, login, true));\n    }\n}\n\n\n\nexport const login = (email, password) => async (dispatch) => {\n    debugger\n    let response = await authAPI.login(email, password);\n    debugger\n    if (response.data.resultCode === \"0\") {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (response.data.resultCode === \"10\") {\n            alert('error')\n            // dispatch(getCaptchaUrl());\n        }\n\n        // let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: 'error'}));\n    }\n}\n\n\nexport const register = (email, password, password_confirm) => async (dispatch) => {\n    debugger\n    let response = await authAPI.register(email, password,password_confirm);\n    debugger\n    if (response.data.resultCode === \"0\") {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (response.data.resultCode === \"10\") {\n            alert('error')\n            // dispatch(getCaptchaUrl());\n        }\n\n        // let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: 'error'}));\n    }\n}\n\n\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === '0') {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n}\n\n\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}