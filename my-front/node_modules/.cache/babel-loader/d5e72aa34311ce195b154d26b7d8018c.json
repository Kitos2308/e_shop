{"ast":null,"code":"import { authAPI, securityAPI } from \"../api/auth\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  // rId: null,\n  email: null,\n  login: null,\n  isAuth: false // captchaUrl: null // if null, then captcha is not required\n\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    email,\n    login,\n    isAuth\n  }\n}); // export const getCaptchaUrlSuccess = (captchaUrl) => ({\n//     type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\n// });\n//\n// export const getAuthUserData = () => async (dispatch) => {\n//     let response = await authAPI.me();\n//\n//     if (response.data.resultCode === 0) {\n//         let {id, login, email} = response.data.data;\n//         dispatch(setAuthUserData(id, email, login, true));\n//     }\n// }\n//\n// export const login = (email, password) => async (dispatch) => {\n//     let response = await authAPI.login(email, password,);\n//     if (response.data.resultCode === 0) {\n//         // success, get auth data\n//         dispatch(getAuthUserData())\n//     } else {\n//         if (response.data.resultCode === 10) {\n//             dispatch(getCaptchaUrl());\n//         }\n//\n//         let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n//         dispatch(stopSubmit(\"login\", {_error: message}));\n//     }\n// }\n//\n// export const getCaptchaUrl = () => async (dispatch) => {\n//     const response = await securityAPI.getCaptchaUrl();\n//     const captchaUrl = response.data.url;\n//     dispatch(getCaptchaUrlSuccess(captchaUrl));\n// }\n//\n//\n//\n\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/n.dolgov/Desktop/projects/Final+code/my-front/src/redux/auth-reducer.js"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","logout","dispatch","response","data","resultCode"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,QAAmC,aAAnC;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,oCAAtB;AACA,MAAMC,uBAAuB,GAAG,8CAAhC;AAEA,IAAIC,YAAY,GAAG;AACf;AACAC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE,KAJO,CAKf;;AALe,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACA,SAAKC,uBAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AARR;AAUH,CAXD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAAER,KAAF,EAASC,KAAT,EAAgBC,MAAhB,MAA4B;AACvDI,EAAAA,IAAI,EAAET,aADiD;AAClCU,EAAAA,OAAO,EACxB;AAAEP,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB;AAFmD,CAA5B,CAAxB,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,MAAM,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC5C,MAAIC,QAAQ,GAAG,MAAMjB,OAAO,CAACe,MAAR,EAArB;;AAEA,MAAIE,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAChCH,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACH;AACJ,CANM;AAQP,eAAeL,WAAf","sourcesContent":["import {authAPI, securityAPI} from \"../api/auth\";\nimport {stopSubmit} from \"redux-form\";\n\nconst SET_USER_DATA = 'samurai-network/auth/SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'samurai-network/auth/GET_CAPTCHA_URL_SUCCESS';\n\nlet initialState = {\n    // rId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    // captchaUrl: null // if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\n\nexport const setAuthUserData = ( email, login, isAuth) => ({\n    type: SET_USER_DATA, payload:\n        { email, login, isAuth}\n});\n\n// export const getCaptchaUrlSuccess = (captchaUrl) => ({\n//     type: GET_CAPTCHA_URL_SUCCESS, payload: {captchaUrl}\n// });\n//\n// export const getAuthUserData = () => async (dispatch) => {\n//     let response = await authAPI.me();\n//\n//     if (response.data.resultCode === 0) {\n//         let {id, login, email} = response.data.data;\n//         dispatch(setAuthUserData(id, email, login, true));\n//     }\n// }\n//\n// export const login = (email, password) => async (dispatch) => {\n//     let response = await authAPI.login(email, password,);\n//     if (response.data.resultCode === 0) {\n//         // success, get auth data\n//         dispatch(getAuthUserData())\n//     } else {\n//         if (response.data.resultCode === 10) {\n//             dispatch(getCaptchaUrl());\n//         }\n//\n//         let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n//         dispatch(stopSubmit(\"login\", {_error: message}));\n//     }\n// }\n//\n// export const getCaptchaUrl = () => async (dispatch) => {\n//     const response = await securityAPI.getCaptchaUrl();\n//     const captchaUrl = response.data.url;\n//     dispatch(getCaptchaUrlSuccess(captchaUrl));\n// }\n//\n//\n//\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout();\n\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n}\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}